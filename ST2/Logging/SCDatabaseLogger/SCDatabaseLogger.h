/*
Copyright (C) 2015, Silent Circle, LLC. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Any redistribution, use, or modification is done solely for personal
      benefit and not for any commercial purpose or for monetary gain
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name Silent Circle nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL SILENT CIRCLE, LLC BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#import <Foundation/Foundation.h>
#import "DDLog.h"
#import "SCDatabaseLoggerConnection.h"
#import "SCDatabaseLoggerTransaction.h"

#ifdef SQLITE_HAS_CODEC
typedef NSData* (^SCDatabaseLoggerCipherKeyBlock)(void);
#endif

/**
 * This notification is posted to the main thread.
 * It signifies that there are new log entries available.
 * 
 * Multiple notifications are automatically coalesced into one.
 * Thus a burst of log messages may result in only one (or a few) notifications on the main thread.
**/
extern NSString *const SCDatabaseLoggerChangedNotification;

/**
 * This class implements a logger (for CocoaLumberjack) that writes the log messages to sqlite.
 * It can handle hundreds of log messages per second without skipping a beat.
**/
@interface SCDatabaseLogger : DDAbstractLogger

/**
 * Instantiates a new instance.
 * Once instantiated, you can immediately plug the logger into CocoaLumberjack.
 * However, the instance will simply buffer all log entries in memory until you setup the database.
 * 
 * @see asyncSetupDatabaseWithPath:completion:
 * @see asyncSetupDatabaseWithPath:cipherKeyBlock:completion:
**/
- (instancetype)init;

/**
 * The standardized filePath of the sqlite database.
 * 
 * @see asyncSetupDatabaseWithPath:completion:
 * @see asyncSetupDatabaseWithPath:cipherKeyBlock:completion:
**/
@property (atomic, readonly) NSString *databasePath;

#ifdef SQLITE_HAS_CODEC
/**
 * The cipherKeyBlock being used by SQLCipher.
 * 
 * @see asyncSetupDatabaseWithPath:completion:
 * @see asyncSetupDatabaseWithPath:cipherKeyBlock:completion:
**/
@property (atomic, readonly) SCDatabaseLoggerCipherKeyBlock cipherKeyBlock;
#endif

/**
 * How long to keep old log statements.
 * For example, you could set this value to 1 week,
 * and then log statements older than 1 week old would be automatically deleted during flushes to the sqlite DB.
 * 
 * The value you pass will automatically be converted to a non-negative value.
 * A value of zero specifies no maxAge, in which case old log messages will not be deleted.
 * 
 * The default maxAge is 7 days.
**/
@property (atomic, assign, readwrite) NSTimeInterval maxAge;

/**
 * Configures the underlying sqlite database for the logger.
 * Until this method is invoked, the logger is simply buffering logEntries in memory.
**/
- (void)setupDatabaseWithPath:(NSString *)filePath completion:(void (^)(BOOL ready))completionBlock;

#ifdef SQLITE_HAS_CODEC
/**
 * Configures the underlying sqlite database for the logger.
 * Until this method is invoked, the logger is simply buffering logEntries in memory.
**/
- (void)setupDatabaseWithPath:(NSString *)filePath
               cipherKeyBlock:(SCDatabaseLoggerCipherKeyBlock)cipherKeyBlock
                   completion:(void (^)(BOOL ready))completionBlock;
#endif

/**
 * A connection provides a read-only interface to the logger's contents.
 * You can use a connection to display (in real-time, in the app itself) the logs being generated by the app.
 * Or you can extract a subset of log entries (perhaps to submit with a bug report).
**/
- (SCDatabaseLoggerConnection *)newConnection;

@end
