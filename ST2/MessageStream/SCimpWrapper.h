/*
Copyright (C) 2015, Silent Circle, LLC. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Any redistribution, use, or modification is done solely for personal
      benefit and not for any commercial purpose or for monetary gain
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name Silent Circle nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL SILENT CIRCLE, LLC BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#import <Foundation/Foundation.h>
#import <SCCrypto/SCcrypto.h>

#import "XMPPJID.h"


extern NSString *const kSCimpInfoVersion;       // NSNumber (uint8_t)
extern NSString *const kSCimpInfoCipherSuite;   // NSNumber (SCimpCipherSuite)
extern NSString *const kSCimpInfoSASMethod;     // NSNumber (SCimpSAS)
extern NSString *const kSCimpInfoSAS;           // NSString
extern NSString *const kSCimpInfoMethod;        // NSNumber (SCimpMethod)
extern NSString *const kSCimpInfoState;         // NSNumber ()
extern NSString *const kSCimpInfoIsReady;       // NSNumber (BOOL)
extern NSString *const kSCimpInfoIsInitiator;   // NSNumber (BOOL)
extern NSString *const kSCimpInfoHasCS;         // NSNumber (BOOL)
extern NSString *const kSCimpInfoCSMatch;       // NSNumber (BOOL)
extern NSString *const kSCimpInfoKeyedDate;     // NSDate


@interface SCimpWrapper : NSObject {
@public
	
	void * scimpCtx; // scimp context
	
	// in memory only variables (not persisted to database)
	
	id temp_userInfo; // used to retain MessageStreamUserInfo during transaction (prevent it from being deallocated)
	
	BOOL temp_forceReKey; // used to signal __encryptAndSendMessage:withTransaction: method
}

- (instancetype)initWithPubSCimpCtx:(SCimpContextRef)ctx;

- (instancetype)initWithSCimpCtx:(SCimpContextRef)ctx
                  conversationID:(NSString *)conversationID
                        localJID:(XMPPJID *)myJID
                       remoteJID:(XMPPJID *)theirJID;

- (instancetype)initWithSCimpCtx:(SCimpContextRef)ctx
                  conversationID:(NSString *)conversationID
                        localJID:(XMPPJID *)myJID
                        threadID:(NSString *)threadID;

@property (nonatomic, strong, readonly) NSString *scimpID;

@property (nonatomic, copy, readonly) NSString *conversationID;
@property (nonatomic, copy, readonly) NSString *threadID;

@property (nonatomic, strong, readonly) XMPPJID *localJID;
@property (nonatomic, strong, readonly) XMPPJID *remoteJID;

@property (nonatomic, assign, readwrite) SCLError scimpError;

@property (nonatomic, assign, readwrite) BOOL isVerified;
@property (nonatomic, assign, readwrite) BOOL awaitingReKeying;

#pragma mark ScimpID

/**
 * The scimpID is NOT a random UUID.
 * Rather it is generated by hashing the important identifiers of the security context.
 * For p2p conversations this means the localJID + remoteJID.
 * For multicast conversations this means the localJID + threadID.
 * 
 * These class methods handle the hashing.
**/
+ (NSString *)scimpIDForLocalJID:(XMPPJID *)localJID remoteJID:(XMPPJID *)remoteJID options:(XMPPJIDCompareOptions)options;
+ (NSString *)scimpIDForLocalJID:(XMPPJID *)localJID threadID:(NSString *)threadID;

/**
 * Allows you to change the remoteJID from a bareJID to a fullJID (or vice-versa).
 * 
 * @return The new scimpID
**/
- (NSString *)updateRemoteJID:(XMPPJID *)newRemoteJID;

#pragma mark Secure Context Info

@property (nonatomic, readonly) SCimpCipherSuite cipherSuite;
@property (nonatomic, readonly) SCimpSAS         sasMethod;

@property (nonatomic, readonly) SCimpMethod protocolMethod;
@property (nonatomic, readonly) SCimpState  protocolState;

@property (nonatomic, readonly) NSString * protocolMethodString;
@property (nonatomic, readonly) NSString * protocolStateString;

@property (nonatomic, readonly) BOOL hasSharedSecret;
@property (nonatomic, readonly) BOOL sharedSecretMatches;

@property (nonatomic, readonly) BOOL isInitiator;
@property (nonatomic, readonly) BOOL isReady;

/**
 * Returns a dictionary with info extracted from the SCimp context.
 * You can use this instead of the SCimp API directly.
 *
 * The dictionary uses kSCimpInfoXXX keys.
**/
- (NSDictionary *)secureContextInfo;
+ (NSDictionary *)secureContextInfoForScimp:(SCimpWrapper *)scimp;

@end
